<?xml version="1.0" encoding="UTF-8"?>
<web-app id="MiniFly" version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<display-name>MiniFly web application</display-name>
  	<servlet>
    	<servlet-name>minifly</servlet-name>
    	<servlet-class>com.googlecode.minifly.web.MiniflyServlet</servlet-class>
  	</servlet>
  	<servlet-mapping>
    	<servlet-name>minifly</servlet-name>
    	<url-pattern>/</url-pattern>
  	</servlet-mapping>
  	
  	<context-param>
    	<param-name>x-minifly-doc-root</param-name>
    	<param-value>D:/apache-data/www/java</param-value>
  	</context-param>
  	
  	<filter>
    	<filter-name>SimplePageCachingFilter</filter-name>
    	<!-- The SimplePageCachingFilter is a simple caching filter suitable for caching compressible HTTP 
    		 responses such as HTML, XML or JSON. It uses a Singleton CacheManager 
    		 created with the default factory method.
    	
    	   	<filter-class>net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter</filter-class>  
    	-->
    	<!-- The com.googlecode.minifly.web.filters.SimplePageCachingFilter is a copy off
    		 net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter, but with a new cache
    		 override option.
    		 
    		 Use the following request parameter to override this cache filter and
    		 obtain the rendered response:
    		 ?cache-override=true
    	
    	<filter-class>com.googlecode.minifly.web.filters.SimplePageCachingFilter</filter-class>
    	-->
    	<!-- The SimpleCachingHeadersPageCachingFilter extends SimplePageCachingFilter to provide 
    		 the HTTP cache headers: ETag, Last-Modified and Expires. 
    		 It supports conditional GET. Because browsers and other HTTP clients have 
    		 the expiry information returned in the response headers, they do not even need to 
    		 request the page again. Even once the local browser copy has expired, 
    		 the browser will do a conditional GET.  
    	
    	<filter-class>net.sf.ehcache.constructs.web.filter.SimpleCachingHeadersPageCachingFilter</filter-class>
    	-->
    	<!-- The com.googlecode.minifly.web.filters.SimpleCachingHeadersPageCachingFilter is a copy off
    		 net.sf.ehcache.constructs.web.filter.SimpleCachingHeadersPageCachingFilter, but with a new cache
    		 override option.
    		 
    		 Use the following request parameter to override this cache filter and
    		 obtain the rendered response:
    		 ?cache-override=true
    	-->
    	<filter-class>com.googlecode.minifly.web.filters.SimpleCachingHeadersPageCachingFilter</filter-class>
    	
    	<init-param> 
        	<param-name>cacheName</param-name>
        	<param-value>MiniflyResourceCachingFilter</param-value>
        </init-param>
  	</filter>

  	<filter-mapping>
    	<filter-name>SimplePageCachingFilter</filter-name>
    	<url-pattern>/*</url-pattern>
  	</filter-mapping>
  	
  	<filter>
        <filter-name>yuiMinFilter</filter-name>
        <filter-class>com.googlecode.minifly.web.filters.YUICompressorFilter</filter-class>
        <!-- All the init params are optional and are equivalent to YUICompressor command line options --> 
        <init-param> 
        	<param-name>line-break</param-name>
        	<param-value>8000</param-value>
        </init-param>
 	</filter>
 	<filter-mapping>
   		<filter-name>yuiMinFilter</filter-name>
   		<url-pattern>*.js</url-pattern>
   		<url-pattern>*.css</url-pattern>
 	</filter-mapping>
 	
 	<!-- Add response headers:
 		 http://onjava.com/pub/a/onjava/2004/03/03/filters.html?page=1
 	 -->
 	<filter>
        <filter-name>responseHeaderFilter</filter-name>
        <filter-class>com.googlecode.minifly.web.filters.ResponseHeaderFilter</filter-class>
        <init-param> 
        	<param-name>Cache-Control</param-name>
        	<param-value>max-age=3600</param-value>
        </init-param>
 	</filter>
 	<filter-mapping>
   		<filter-name>responseHeaderFilter</filter-name>
   		<url-pattern>*.js</url-pattern>
   		<url-pattern>*.css</url-pattern>
 	</filter-mapping>
 	
 	
</web-app>